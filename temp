const routes: Routes = [
  {
    path: 'dashboard',
    component: DashboardComponent,
    children: [
      {
        path: 'report/:reportId',
        component: ReportComponent,
        data: { title: 'Report' }
      },
      {
        path: 'summary',
        component: SummaryComponent,
        data: { title: 'Summary' }
      },
      // other children...
    ]
  },
  // other routes...
];



import { Component } from '@angular/core';
import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { filter, map } from 'rxjs/operators';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  constructor(
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private titleService: Title
  ) {
    this.setTitleFromRoute();
  }

  setTitleFromRoute() {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd),
      map(() => {
        let route = this.activatedRoute;
        while (route.firstChild) {
          route = route.firstChild;
        }
        return route;
      })
    ).subscribe(route => {
      const routeData = route.snapshot.data;
      const baseTitle = routeData['title'] || 'App';

      const params = route.snapshot.params;
      let dynamicPart = '';

      // Append dynamic reportId if available
      if (params['reportId']) {
        dynamicPart = ` - ${params['reportId']}`;
      }

      this.titleService.setTitle(`${baseTitle}${dynamicPart}`);
    });
  }
}



xAxis: [{ // Default x-axis for bar values
    categories: ['Category 1', 'Category 2', 'Category 3']
}, { // Second x-axis for fixed endpoint
    opposite: true, // Place it on the opposite side
    min: 0,
    max: 100, // Or whatever your maximum value is for the alignment line
    title: {
        text: 'Fixed Endpoint'
    }
}],
series: [{
    type: 'bar',
    data: [10, 50, 30],
}, {
    type: 'line',
    xAxis: 1, // Use the second x-axis
    data: [70, 70, 70], // All points at the same x-value for alignment
    marker: {
        enabled: false
    },
    color: 'red', // Optional: make the line visible
    lineWidth: 1
}]
