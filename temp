const routes: Routes = [
  {
    path: 'dashboard',
    component: DashboardComponent,
    children: [
      {
        path: 'report/:reportId',
        component: ReportComponent,
        data: { title: 'Report' }
      },
      {
        path: 'summary',
        component: SummaryComponent,
        data: { title: 'Summary' }
      },
      // other children...
    ]
  },
  // other routes...
];



import { Component } from '@angular/core';
import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { filter, map } from 'rxjs/operators';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  constructor(
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private titleService: Title
  ) {
    this.setTitleFromRoute();
  }

  setTitleFromRoute() {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd),
      map(() => {
        let route = this.activatedRoute;
        while (route.firstChild) {
          route = route.firstChild;
        }
        return route;
      })
    ).subscribe(route => {
      const routeData = route.snapshot.data;
      const baseTitle = routeData['title'] || 'App';

      const params = route.snapshot.params;
      let dynamicPart = '';

      // Append dynamic reportId if available
      if (params['reportId']) {
        dynamicPart = ` - ${params['reportId']}`;
      }

      this.titleService.setTitle(`${baseTitle}${dynamicPart}`);
    });
  }
}



chart: {
      type: 'bar',
      marginRight: 30,
    },
    plotOptions: {
      series: {
        stacking: 'normal',
        pointWidth: 5,
        dataLabels: {
          enabled: true,
          verticalAlign: 'bottom',
          style: {
            color: 'black'
          }
        },
        enableMouseTracking: false,
        borderWidth: 0
      }
    },

    legend: {
      enabled: false
    },

    yAxis: {
      visible: false,
      minPadding: 0,
      maxPadding: 0,
      max: 8,
      min: 0
    },

    xAxis: {
      visible: false
    },

    series: [{
      color: 'grey',
      data: [3, 5, 7],
      dataLabels: {
        align: 'right',
        format: '{point.y} %'
      }
    }, {
      color: 'green',
      data: [{
        y: 5,
        label: 'Footbal'
      }, {
        y: 3,
        label: 'Soccer'
      }, {
        y: 1,
        label: 'Baseball'
      }],
      dataLabels: {
        align: 'left',
        format: '{point.label}'
      }
    }]
  });
});

